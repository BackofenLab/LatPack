#include "biu/LatticeDescriptorCKW.hh"

#include <cstdlib>

namespace biu
{

	LatticeDescriptorCKW::LatticeDescriptorCKW()
	 :	LatticeDescriptor("210")
	{
		// gitterbasis
		latBase.push_back(IntPoint(1,0,0));	// x
		latBase.push_back(IntPoint(0,1,0));	// y
		latBase.push_back(IntPoint(0,0,1));	// z
		
		initNeighborhood();
		initAutomorphisms();

	}

	LatticeDescriptorCKW::LatticeDescriptorCKW(
			const LatticeDescriptorCKW& toCopy )
	 :	LatticeDescriptor(toCopy)
	{
		
	}
	
	LatticeDescriptorCKW::~LatticeDescriptorCKW()
	{
	}

	unsigned int 
	LatticeDescriptorCKW::getNeighborDataSize() const {
		return 24;
	}
	
	const LatticeDescriptor::NeighborData *
	LatticeDescriptorCKW::getNeighborData() const {
			// init
		static const NeighborData CKWNeighborData[] = {
			{"FFR",{2,1,0},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"FFL",{2,-1,0},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"FFU",{2,0,1},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"FFD",{2,0,-1},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"BBR",{-2,1,0},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"BBL",{-2,-1,0},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"BBU",{-2,0,1},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"BBD",{-2,0,-1},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"RRF",{1,2,0},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"RRB",{-1,2,0},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"RRU",{0,2,1},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"RRD",{0,2,-1},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"LLF",{1,-2,0},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"LLB",{-1,-2,0},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"LLU",{0,-2,1},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"LLD",{0,-2,-1},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"UUF",{1,0,2},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"UUB",{-1,0,2},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"UUR",{0,1,2},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"UUL",{0,-1,2},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"DDF",{1,0,-2},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"DDB",{-1,0,-2},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"DDR",{0,1,-2},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}},
			{"DDL",{0,-1,-2},
			 {{0,0,0},{0,0,0},{0,0,0}}, {{0,0,0},{0,0,0},{0,0,0}}}
			};
		
		return CKWNeighborData;
	}

	
	unsigned int LatticeDescriptorCKW::getAutomorphismDataSize() const {
		return 48;
	}

	const LatticeDescriptorCKW::AutomorphismData *
	LatticeDescriptorCKW::getAutomorphismData() const {
		static const AutomorphismData data[] = 
			{{{1,0,0},{0,1,0},{0,0,1}}, {{0,0,1},{0,1,0},{1,0,0}},
			 {{0,0,1},{0,1,0},{-1,0,0}}, {{0,0,1},{0,-1,0},{1,0,0}},
			 {{0,0,1},{0,-1,0},{-1,0,0}}, {{0,0,1},{1,0,0},{0,1,0}},
			 {{0,0,1},{1,0,0},{0,-1,0}}, {{0,0,1},{-1,0,0},{0,1,0}},
			 {{0,0,1},{-1,0,0},{0,-1,0}}, {{0,0,-1},{0,1,0},{1,0,0}},
			 {{0,0,-1},{0,1,0},{-1,0,0}}, {{0,0,-1},{0,-1,0},{1,0,0}},
			 {{0,0,-1},{0,-1,0},{-1,0,0}}, {{0,0,-1},{1,0,0},{0,1,0}},
			 {{0,0,-1},{1,0,0},{0,-1,0}}, {{0,0,-1},{-1,0,0},{0,1,0}},
			 {{0,0,-1},{-1,0,0},{0,-1,0}}, {{0,1,0},{0,0,1},{1,0,0}},
			 {{0,1,0},{0,0,1},{-1,0,0}}, {{0,1,0},{0,0,-1},{1,0,0}},
			 {{0,1,0},{0,0,-1},{-1,0,0}}, {{0,1,0},{1,0,0},{0,0,1}},
			 {{0,1,0},{1,0,0},{0,0,-1}}, {{0,1,0},{-1,0,0},{0,0,1}},
			 {{0,1,0},{-1,0,0},{0,0,-1}}, {{0,-1,0},{0,0,1},{1,0,0}},
			 {{0,-1,0},{0,0,1},{-1,0,0}}, {{0,-1,0},{0,0,-1},{1,0,0}},
			 {{0,-1,0},{0,0,-1},{-1,0,0}}, {{0,-1,0},{1,0,0},{0,0,1}},
			 {{0,-1,0},{1,0,0},{0,0,-1}}, {{0,-1,0},{-1,0,0},{0,0,1}},
			 {{0,-1,0},{-1,0,0},{0,0,-1}}, {{1,0,0},{0,0,1},{0,1,0}},
			 {{1,0,0},{0,0,1},{0,-1,0}}, {{1,0,0},{0,0,-1},{0,1,0}},
			 {{1,0,0},{0,0,-1},{0,-1,0}}, {{1,0,0},{0,1,0},{0,0,-1}},
			 {{1,0,0},{0,-1,0},{0,0,1}}, {{1,0,0},{0,-1,0},{0,0,-1}},
			 {{-1,0,0},{0,0,1},{0,1,0}}, {{-1,0,0},{0,0,1},{0,-1,0}},
			 {{-1,0,0},{0,0,-1},{0,1,0}}, {{-1,0,0},{0,0,-1},{0,-1,0}},
			 {{-1,0,0},{0,1,0},{0,0,1}}, {{-1,0,0},{0,1,0},{0,0,-1}},
			 {{-1,0,0},{0,-1,0},{0,0,1}}, {{-1,0,0},{0,-1,0},{0,0,-1}}};
		return data;
	}
	
	bool 
	LatticeDescriptorCKW::areNeighbored(	const IntPoint &first, 
											const IntPoint &second ) const
	{
		int dx = abs(second.getX()-first.getX());
		if (dx > 2) 
			return false;
		int dy = abs(second.getY()-first.getY());
		if (dy > 2 || (dx+dy) > 3) 
			return false;
		int dz = abs(second.getZ()-first.getZ());
		if (dz > 2 || (dx+dy+dz) != 3) 
			return false;
		return true;
	}

	
	double
	LatticeDescriptorCKW::
	getBaseScale( const double neighVecLength ) const
	{
		return  sqrt( pow(neighVecLength, 2) / 5.0 );;
	}

	bool 
	LatticeDescriptorCKW::
	isLatticeNode( const IntPoint & p ) const
	{
		  // all points are reachable
		return true;
	}

} // namespace biu

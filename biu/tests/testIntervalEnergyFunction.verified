========== BEGIN OF TEST =================
 test class : IntervalEnergyFunction
==========================================
=> creating biu::Alphabet(ABCD,1) = alph
=> creating biu::IntervalEnergyFunction( alph)
->getAlphabet()->getAlphabetSize() = 4
=> getIntervalNum() = 0
=> getInterval( 4.0 ) == UINT_MAX ?  1
=> creating biu::EnergyMatrix(4,4,1.0) = E1
1 1 1 1 
1 1 1 1 
1 1 1 1 
1 1 1 1 

=> addInterval( E1, 2.0 ) = 0
=> creating biu::EnergyMatrix(4,4,2.0) = E1
2 2 2 2 
2 2 2 2 
2 2 2 2 
2 2 2 2 

=> addInterval( E2, 3.0 ) = 1
=> creating biu::EnergyMatrix(4,4,3.0) = E1
3 3 3 3 
3 3 3 3 
3 3 3 3 
3 3 3 3 

=> addInterval( E3, 14.0 ) = 2
=> getIntervalNum() = 3
=> getIntervalMax( 0) = 2
=> getIntervalMax( 1) = 3
=> getIntervalMax( 2) = 14
=> getInterval( 0.0 ) = 0
=> getInterval( 2.0 ) = 0
=> getInterval( 2.4 ) = 1
=> getInterval( 13.0 ) = 2
->getEnergy( A, C, 0.1 )1
->getEnergy( A, C, 1.1 )1
->getEnergy( A, C, 2.1 )2
->getEnergy( A, C, 3.1 )3
->getEnergy( A, C, 4.1 )3
=> new DblPoint p1 = 1.2  3  1.2
=> new DblPoint p2 = 4.3  2  1.8
=> distance of p1 and p2 = 3.3121
->getEnergy( A, C, p1, p2 ) = 3
=> new IntPoint p1 = 1  3  1
=> new IntPoint p2 = 4  2  1
=> distance of p1 and p2 = 3.16228
->getEnergy( A, C, p1, p2 ) = 3
-> (f == f) = true
-> (f != f) = false
=> copy f : biu::IntervalEnergyFunction f2 = f
-> (f == f2) = true
-> (f != f2) = false
=> addInterval( E3, 15.0 ) = 3
-> (f == f2) = false
-> (f != f2) = true
============= END OF TEST ================

